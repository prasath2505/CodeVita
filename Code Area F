def is_valid_sudoku(grid):
    def is_valid_block(block):
        seen = set()
        for num in block:
            if num != 0 and num in seen:
                return False
            seen.add(num)
        return True
    
    # Check rows and columns
    for i in range(9):
        row = [grid[i][j] for j in range(9)]
        column = [grid[j][i] for j in range(9)]
        if not is_valid_block(row) or not is_valid_block(column):
            return False
    
    # Check 3x3 subgrids
    for i in range(0, 9, 3):
        for j in range(0, 9, 3):
            block = [grid[x][y] for x in range(i, i+3) for y in range(j, j+3)]
            if not is_valid_block(block):
                return False
    
    return True

def solve_puzzle(grid, hints, k):
    modifications = []
    
    # Validate and collect cells that need modification
    for i in range(9):
        for j in range(9):
            num = grid[i][j]
            if num > 0 and not is_valid_sudoku(grid):
                # Attempt to replace if it's a hint cell or a Tina-filled cell
                if num % 10 == 0 or num < 10:
                    for hint in hints:
                        original = grid[i][j]
                        grid[i][j] = hint
                        if is_valid_sudoku(grid):
                            modifications.append((i, j))
                            break
                        grid[i][j] = original
    
    if len(modifications) == 0:
        print("Won")
    elif len(modifications) > k:
        print("Impossible")
    else:
        for mod in modifications:
            print(f"{mod[0]} {mod[1]}")

# Parsing input
grid = [list(map(int, input().split())) for _ in range(9)]
hints = list(map(int, input().split()))
k = int(input().strip())

solve_puzzle(grid, hints, k)
